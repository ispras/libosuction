#!/bin/sh -

die () {
    echo "error: " $@
    echo "pass --help for help"
    exit 1
}

usage () {
cat <<EOF
Usage: $0 [OPTION]... [VAR=VALUE]

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  --plugdir=DIR           directory to store/look for the plugins during operation [/tmp/gccwrap]
  --auxdir=DIR            directory to store/look for the auxiliary files during operations [/tmp/gccwrap]
  --elfclass=VAL          ELF bitness (either 32 or 64) [auto]
  --debug[=yes]           debug build [no]
  --release[=yes]         release build [no]

Some influential environment variables:
  CC                      C compiler command [detected: gcc/c99/cc]
  CFLAGS                  C compiler flags
  CPPFLAGS                C preprocessor flags [-I. -DSECTIONS]
  CXX                     C++ compiler command [detected: g++/c++]
  CXXFLAGS                C++ compiler flags
  LDFLAGS                 linker flags
EOF
exit 0
}

cmdexists () { type "$1" >/dev/null 2>&1 ; }
trycc () { test -z "$CC" && cmdexists "$1" && CC=$1 ; }
trycxx () { test -z "$CXX" && cmdexists "$1" && CXX=$1 ; }

debug=no
release=no
elfclass=
plugdir=/tmp/gccwrap
auxdir=/tmp/gccwrap

for arg ; do
    case "$arg" in
        --help|-h) usage ;;
        --debug|--debug=yes) debug=yes ;;
        --release|--release=yes) release=yes ;;
        --plugdir=*) plugdir=${arg#*=} ;;
        --auxdir=*) auxdir=${arg#*=} ;;
        --elfclass=*)
            elfclass=${arg#*=}
            test "$elfclass" != "32" -a "$elfclass" != "64" &&
                die "$0: elfclass must be eihter 32 or 64."
            ;;
        -* ) echo "$0: unknown option $arg. Skipping." ;;
        CC=*) CC=${arg#*=} ;;
        CFLAGS=*) CFLAGS=${arg#*=} ;;
        CPPFLAGS=*) CPPFLAGS=${arg#*=} ;;
        CXX=*) CXX=${arg#*=} ;;
        CXXFLAGS=*) CXXFLAGS=${arg#*=} ;;
        LDFLAGS=*) LDFLAGS=${arg#*=} ;;
        *) echo "$0: unrecognized argument '$arg'. Skipping." ;;
    esac
done

if test "$release" = yes -a "$debug" = yes; then
    die "$0: incompatible options --release and --debug"
fi
if test "$release" = no -a "$debug" = no; then
    die "$0: either --release or --debug must be specified"
fi

# TODO: consider putting privatized symbols into seperate sections (in the
# compiler plugin) instead of always having to build the wrapper with -DSECTIONS.
CPPFLAGS="$CPPFLAGS -I. -DSECTIONS"

if test "$debug" = yes; then
    CFLAGS="$CFLAGS -g -fno-inline-functions"
fi
if test "$release" = yes; then
    CFLAGS="$CFLAGS -O2"
fi

printf "checking for a C compiler... "
trycc gcc
trycc c99
trycc cc
printf "%s\n" "$CC"
test -n "$CC" || die "$0: cannot find a C compiler"

printf "checking for a C++ compiler... "
trycxx g++
trycxx c++
printf "%s\n" "$CXX"
test -n "$CXX" || die "$0: cannot find a C++ compiler"

exec 3>&1 1>confdef.h
cat << EOF
/* This file was generated by:
 * $0
 * Any changes made here will be lost if configure is re-run. */

#ifndef CONFDEF_H
#define CONFDEF_H

#define PLUGDIR "$plugdir/"
#define AUXDIR "$auxdir/"
EOF

if test -n "$elfclass"; then
cat <<- EOF
#define PLUG_TARGET_ELFCLASS $elfclass
EOF
fi

cat << EOF

#endif // CONFDEF_H
EOF

exec 1>config.mak
cat << EOF
# This version of config.mak was generated by:
# $0
# Any changes made here will be lost if configure is re-run.

CC = $CC
CFLAGS = $CFLAGS
CPPFLAGS = $CPPFLAGS
CXX = $CXX
CXXFLAGS = $CXXFLAGS
LDFLAGS = $LDFLAGS

plugdir = $plugdir
auxdir = $auxdir
EOF
exec 1>&3 3>&-
